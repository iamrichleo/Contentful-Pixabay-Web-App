{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_IMAGES = 5; // Limit to 5 images\n\nconst Field = () => {\n  _s();\n  const sdk = useSDK(); // Access the Contentful SDK\n  const [imageUrls, setImageUrls] = useState([]);\n  useEffect(() => {\n    // Load the initial value from the field (if exists)\n    const initialValue = sdk.field.getValue();\n    if (initialValue) {\n      setImageUrls(initialValue);\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    // Pass current images to the dialog and allow selecting multiple\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,\n        // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length // Limit the selection to the remaining slots\n      }\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && selectedImages.length > 0) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls); // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = index => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls); // Update the field with the remaining images\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: imageUrls.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: \"Selected from Pixabay\",\n          style: {\n            maxWidth: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => removeImage(index),\n          style: {\n            marginTop: '5px'\n          },\n          children: \"Remove Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), imageUrls.length < MAX_IMAGES && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: openPixabayDialog,\n      children: imageUrls.length > 0 ? 'Add More Images' : 'Select Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), imageUrls.length >= MAX_IMAGES && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You can only select up to \", MAX_IMAGES, \" images.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Field, \"T2fS1IA4kEfV1iw74Vigf9oy38M=\", false, function () {\n  return [useSDK];\n});\n_c = Field;\nexport default Field;\n\n// SINGLE IMAGE SUPPORT\n\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrl, setImageUrl] = useState(null);\n\n//   useEffect(() => {\n//     // Load the initial value from the field (if exists)\n//     const initialValue = sdk.field.getValue();\n//     if (initialValue) {\n//       setImageUrl(initialValue);\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select an image from Pixabay\n//   const openPixabayDialog = async () => {\n//     const selectedImageUrl = await sdk.dialogs.openCurrentApp({\n//       title: 'Select an Image from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//     });\n\n//     // After the dialog closes, we get the selected image URL\n//     if (selectedImageUrl) {\n//       setImageUrl(selectedImageUrl);\n//       sdk.field.setValue(selectedImageUrl);  // Store the selected image URL in the field\n//     }\n//   };\n\n//   // Remove the image\n//   const removeImage = () => {\n//     setImageUrl(null);\n//     sdk.field.removeValue();  // Clear the field value\n//   };\n\n//   return (\n//     <div>\n//       {imageUrl ? (\n//         <>\n//           <img src={imageUrl} alt=\"Selected from Pixabay\" style={{ maxWidth: '100%' }} />\n//           <Button onClick={removeImage}>Remove Image</Button>\n//         </>\n//       ) : (\n//         <Button onClick={openPixabayDialog}>Select Image</Button>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Field;\nvar _c;\n$RefreshReg$(_c, \"Field\");","map":{"version":3,"names":["React","useState","useEffect","useSDK","Button","jsxDEV","_jsxDEV","MAX_IMAGES","Field","_s","sdk","imageUrls","setImageUrls","initialValue","field","getValue","openPixabayDialog","selectedImages","dialogs","openCurrentApp","title","width","minHeight","parameters","currentImages","maxImages","length","updatedImageUrls","slice","setValue","removeImage","index","filter","_","i","children","map","imageUrl","style","marginBottom","src","alt","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\n\nconst MAX_IMAGES = 5;  // Limit to 5 images\n\nconst Field = () => {\n  const sdk = useSDK();  // Access the Contentful SDK\n  const [imageUrls, setImageUrls] = useState([]);\n\n  useEffect(() => {\n    // Load the initial value from the field (if exists)\n    const initialValue = sdk.field.getValue();\n    if (initialValue) {\n      setImageUrls(initialValue);\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    // Pass current images to the dialog and allow selecting multiple\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,  // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n      },\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && selectedImages.length > 0) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = (index) => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n  };\n\n  return (\n    <div>\n      <div>\n        {imageUrls.map((imageUrl, index) => (\n          <div key={index} style={{ marginBottom: '10px' }}>\n            <img src={imageUrl} alt=\"Selected from Pixabay\" style={{ maxWidth: '100%' }} />\n            <Button onClick={() => removeImage(index)} style={{ marginTop: '5px' }}>\n              Remove Image\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      {imageUrls.length < MAX_IMAGES && (\n        <Button onClick={openPixabayDialog}>\n          {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n        </Button>\n      )}\n\n      {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n    </div>\n  );\n};\n\nexport default Field;\n\n\n\n\n\n\n// SINGLE IMAGE SUPPORT\n\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrl, setImageUrl] = useState(null);\n\n//   useEffect(() => {\n//     // Load the initial value from the field (if exists)\n//     const initialValue = sdk.field.getValue();\n//     if (initialValue) {\n//       setImageUrl(initialValue);\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select an image from Pixabay\n//   const openPixabayDialog = async () => {\n//     const selectedImageUrl = await sdk.dialogs.openCurrentApp({\n//       title: 'Select an Image from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//     });\n\n//     // After the dialog closes, we get the selected image URL\n//     if (selectedImageUrl) {\n//       setImageUrl(selectedImageUrl);\n//       sdk.field.setValue(selectedImageUrl);  // Store the selected image URL in the field\n//     }\n//   };\n\n//   // Remove the image\n//   const removeImage = () => {\n//     setImageUrl(null);\n//     sdk.field.removeValue();  // Clear the field value\n//   };\n\n//   return (\n//     <div>\n//       {imageUrl ? (\n//         <>\n//           <img src={imageUrl} alt=\"Selected from Pixabay\" style={{ maxWidth: '100%' }} />\n//           <Button onClick={removeImage}>Remove Image</Button>\n//         </>\n//       ) : (\n//         <Button onClick={openPixabayDialog}>Select Image</Button>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Field;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}