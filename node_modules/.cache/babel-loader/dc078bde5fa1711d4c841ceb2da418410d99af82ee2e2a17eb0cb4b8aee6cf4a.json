{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx\",\n  _s = $RefreshSig$();\n/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n_c = Container;\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 20px;\n`;\n_c2 = ImageGrid;\nconst Image = styled.img`\n  cursor: pointer;\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n`;\n_c3 = Image;\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n_c4 = Message;\nconst ErrorMessage = styled.p`\n  margin-top: 20px;\n  color: red;\n  font-weight: bold;\n`;\n_c5 = ErrorMessage;\nconst PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\nconst Dialog = () => {\n  _s();\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false); // New state to track if search has been made\n\n  const searchImages = async () => {\n    setIsLoading(true);\n    setError(null); // Reset error state before making a new request\n    setHasSearched(true); // Set to true after the first search\n\n    try {\n      const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      if (data.hits.length === 0) {\n        setImages([]); // No images found for the query\n      } else {\n        setImages(data.hits); // Images returned successfully\n      }\n    } catch (err) {\n      setError('Something went wrong. Please try again.'); // Handle error\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n  const handleImageClick = imageUrl => {\n    sdk.close(imageUrl);\n  };\n  return _jsxDEV(Container, {\n    children: [_jsxDEV(TextInput, {\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search for images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      onClick: searchImages,\n      isDisabled: isLoading,\n      children: isLoading ? 'Searching...' : 'Search Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), error && _jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), \"  \", !error && images.length === 0 && hasSearched && !isLoading && _jsxDEV(Message, {\n      children: \"No images found for this query. Try a different search term.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), _jsxDEV(ImageGrid, {\n      children: images.map(image => _jsxDEV(Image, {\n        src: image.previewURL,\n        alt: image.tags,\n        onClick: () => handleImageClick(image.largeImageURL)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Dialog, \"KZK4FRYIM9cLFG9SG7Rq9YbqBZE=\", false, function () {\n  return [useSDK];\n});\n_c6 = Dialog;\nexport default Dialog;\n\n// REFACTOR CODE, services - FinSweet\n// BONUS: support multiple images\n// NOTE: Do I need to support scrolling images, pagination? How many can display at a time?\n// Format the Dialog, Format the Image once selected. Adjust the copy in the app.\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ImageGrid\");\n$RefreshReg$(_c3, \"Image\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"ErrorMessage\");\n$RefreshReg$(_c6, \"Dialog\");","map":{"version":3,"names":["React","useState","useSDK","Button","TextInput","styled","jsxDEV","_jsxDEV","Container","div","_c","ImageGrid","_c2","Image","img","_c3","Message","p","_c4","ErrorMessage","_c5","PIXABAY_API_KEY","Dialog","_s","sdk","query","setQuery","images","setImages","error","setError","isLoading","setIsLoading","hasSearched","setHasSearched","searchImages","response","fetch","encodeURIComponent","ok","Error","data","json","hits","length","err","handleImageClick","imageUrl","close","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isDisabled","map","image","src","previewURL","alt","tags","largeImageURL","id","_c6","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n`;\n\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n\nconst ErrorMessage = styled.p`\n  margin-top: 20px;\n  color: red;\n  font-weight: bold;\n`;\n\nconst PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\nconst Dialog = () => {\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false);  // New state to track if search has been made\n\n  const searchImages = async () => {\n    setIsLoading(true);\n    setError(null); // Reset error state before making a new request\n    setHasSearched(true);  // Set to true after the first search\n\n    try {\n      const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      if (data.hits.length === 0) {\n        setImages([]);  // No images found for the query\n      } else {\n        setImages(data.hits);  // Images returned successfully\n      }\n    } catch (err) {\n      setError('Something went wrong. Please try again.'); // Handle error\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n\n  const handleImageClick = (imageUrl) => {\n    sdk.close(imageUrl);\n  };\n\n  return (\n    <Container>\n      <TextInput\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search for images\"\n      />\n      <Button onClick={searchImages} isDisabled={isLoading}>\n        {isLoading ? 'Searching...' : 'Search Images'}\n      </Button>\n\n      {error && <ErrorMessage>{error}</ErrorMessage>}  {/* Show error message */}\n\n      {/* Only show 'No images found' if the user has searched at least once */}\n      {!error && images.length === 0 && hasSearched && !isLoading && (\n        <Message>No images found for this query. Try a different search term.</Message>\n      )}\n\n      <ImageGrid>\n        {images.map((image) => (\n          <Image\n            key={image.id}\n            src={image.previewURL}\n            alt={image.tags}\n            onClick={() => handleImageClick(image.largeImageURL)}\n          />\n        ))}\n      </ImageGrid>\n    </Container>\n  );\n};\n\nexport default Dialog;\n\n\n\n\n\n// REFACTOR CODE, services - FinSweet\n// BONUS: support multiple images\n// NOTE: Do I need to support scrolling images, pagination? How many can display at a time?\n// Format the Dialog, Format the Image once selected. Adjust the copy in the app.\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}