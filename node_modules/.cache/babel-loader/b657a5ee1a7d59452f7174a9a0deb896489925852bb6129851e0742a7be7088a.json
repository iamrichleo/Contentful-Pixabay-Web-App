{"ast":null,"code":"\n\n// SINGLE IMAGE SUPPORT\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n// `;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0); // Total number of images that match the query\n//   const imagesPerPage = 20;  // Number of images to fetch per page (default 20 for Pixabay)\n\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state before making a new request\n//     setHasSearched(true);  // Set to true after the first search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Store the total number of hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (err) {\n//       setError('Something went wrong. Please try again.'); // Handle error\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleImageClick = (imageUrl) => {\n//     sdk.close(imageUrl);\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => (\n//           <Image\n//             key={image.id}\n//             src={image.previewURL}\n//             alt={image.tags}\n//             onClick={() => handleImageClick(image.largeImageURL)}\n//           />\n//         ))}\n//       </ImageGrid>\n\n//       {/* Pagination Controls */}\n//       {hasSearched && totalHits > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);","map":{"version":3,"names":[],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx"],"sourcesContent":["\n\n\n\n\n\n\n\n\n// SINGLE IMAGE SUPPORT\n\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n// `;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0); // Total number of images that match the query\n//   const imagesPerPage = 20;  // Number of images to fetch per page (default 20 for Pixabay)\n\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state before making a new request\n//     setHasSearched(true);  // Set to true after the first search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Store the total number of hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (err) {\n//       setError('Something went wrong. Please try again.'); // Handle error\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleImageClick = (imageUrl) => {\n//     sdk.close(imageUrl);\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => (\n//           <Image\n//             key={image.id}\n//             src={image.previewURL}\n//             alt={image.tags}\n//             onClick={() => handleImageClick(image.largeImageURL)}\n//           />\n//         ))}\n//       </ImageGrid>\n\n//       {/* Pagination Controls */}\n//       {hasSearched && totalHits > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\n\n"],"mappings":";;AASA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}