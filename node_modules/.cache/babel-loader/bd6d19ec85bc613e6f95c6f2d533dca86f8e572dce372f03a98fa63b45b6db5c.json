{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx\",\n  _s = $RefreshSig$();\n/** @jsxImportSource @emotion/react */\nimport React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst MAX_IMAGES = 5; // Limit to 5 images\n\n// Styled Components using Emotion\nconst Container = styled.div`\n  max-height: 400px;\n  overflow-y: auto;\n`;\n_c = Container;\nconst ImageRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n_c2 = ImageRow;\nconst ImageContainer = styled.div`\n  text-align: center;\n`;\n_c3 = ImageContainer;\nconst StyledImage = styled.img`\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n_c4 = StyledImage;\nconst Field = () => {\n  _s();\n  const sdk = useSDK(); // Access the Contentful SDK\n  const [imageUrls, setImageUrls] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Start the auto-resizer to automatically adjust the iFrame size\n    sdk.window.startAutoResizer();\n\n    // Load the initial value from the field (if exists) and ensure it's an array\n    const initialValue = sdk.field.getValue();\n    if (Array.isArray(initialValue)) {\n      setImageUrls(initialValue); // If the value is an array, set it\n    } else {\n      setImageUrls([]); // Otherwise, initialize as an empty array\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    // Pass current images to the dialog and allow selecting multiple\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,\n        // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length // Limit the selection to the remaining slots\n      }\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && Array.isArray(selectedImages)) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls); // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = index => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls); // Update the field with the remaining images\n  };\n  return _jsxDEV(Container, {\n    children: [_jsxDEV(ImageRow, {\n      children: imageUrls.map((imageUrl, index) => _jsxDEV(ImageContainer, {\n        children: [_jsxDEV(StyledImage, {\n          src: imageUrl,\n          alt: \"Selected from Pixabay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), _jsxDEV(Button, {\n          onClick: () => removeImage(index),\n          size: \"small\",\n          style: {\n            marginTop: '5px'\n          },\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), imageUrls.length < MAX_IMAGES && _jsxDEV(Button, {\n      onClick: openPixabayDialog,\n      style: {\n        marginTop: '15px'\n      },\n      children: imageUrls.length > 0 ? 'Add More Images' : 'Select Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), imageUrls.length >= MAX_IMAGES && _jsxDEV(\"p\", {\n      children: [\"You can only select up to \", MAX_IMAGES, \" images.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Field, \"T2fS1IA4kEfV1iw74Vigf9oy38M=\", false, function () {\n  return [useSDK];\n});\n_c5 = Field;\nexport default Field;\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// // Constants\n// const MAX_IMAGES = 5;  // Limit to 5 images\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   max-height: 400px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: grid;\n//   grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n//   gap: 10px;\n// `;\n\n// const ImageContainer = styled.div`\n//   text-align: center;\n// `;\n\n// const StyledImage = styled.img`\n//   width: 100px;\n//   height: 100px;\n//   object-fit: cover;\n//   border-radius: 5px;\n// `;\n\n// // Component\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n//   useEffect(() => {\n//     // Load the initial value from the field (if exists) and ensure it's an array\n//     const initialValue = sdk.field.getValue();\n\n//     if (Array.isArray(initialValue)) {\n//       setImageUrls(initialValue);  // If the value is an array, set it\n//     } else {\n//       setImageUrls([]);  // Otherwise, initialize as an empty array\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select multiple images from Pixabay\n//   const openPixabayDialog = async () => {\n//     // Pass current images to the dialog and allow selecting multiple\n//     const selectedImages = await sdk.dialogs.openCurrentApp({\n//       title: 'Select Images from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//       parameters: {\n//         currentImages: imageUrls,  // Pass the current images as parameters\n//         maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n//       },\n//     });\n\n//     // After the dialog closes, merge the new images with the existing ones\n//     if (selectedImages && Array.isArray(selectedImages)) {\n//       const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n//       setImageUrls(updatedImageUrls);\n//       sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n//     }\n//   };\n\n//   // Remove an individual image\n//   const removeImage = (index) => {\n//     const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n//     setImageUrls(updatedImageUrls);\n//     sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n//   };\n\n//   return (\n//     <Container>\n//       <ImageGrid>\n//         {imageUrls.map((imageUrl, index) => (\n//           <ImageContainer key={index}>\n//             <StyledImage src={imageUrl} alt=\"Selected from Pixabay\" />\n//             <Button onClick={() => removeImage(index)} size=\"small\" style={{ marginTop: '5px' }}>\n//               Remove\n//             </Button>\n//           </ImageContainer>\n//         ))}\n//       </ImageGrid>\n\n//       {imageUrls.length < MAX_IMAGES && (\n//         <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n//           {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n//         </Button>\n//       )}\n\n//       {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n//     </Container>\n//   );\n// };\n\n// export default Field;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ImageRow\");\n$RefreshReg$(_c3, \"ImageContainer\");\n$RefreshReg$(_c4, \"StyledImage\");\n$RefreshReg$(_c5, \"Field\");","map":{"version":3,"names":["React","useState","useEffect","useSDK","Button","styled","jsxDEV","_jsxDEV","MAX_IMAGES","Container","div","_c","ImageRow","_c2","ImageContainer","_c3","StyledImage","img","_c4","Field","_s","sdk","imageUrls","setImageUrls","window","startAutoResizer","initialValue","field","getValue","Array","isArray","openPixabayDialog","selectedImages","dialogs","openCurrentApp","title","width","minHeight","parameters","currentImages","maxImages","length","updatedImageUrls","slice","setValue","removeImage","index","filter","_","i","children","map","imageUrl","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","style","marginTop","_c5","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\n\nconst MAX_IMAGES = 5;  // Limit to 5 images\n\n// Styled Components using Emotion\nconst Container = styled.div`\n  max-height: 400px;\n  overflow-y: auto;\n`;\n\nconst ImageRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst ImageContainer = styled.div`\n  text-align: center;\n`;\n\nconst StyledImage = styled.img`\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nconst Field = () => {\n  const sdk = useSDK();  // Access the Contentful SDK\n  const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n  useEffect(() => {\n    // Start the auto-resizer to automatically adjust the iFrame size\n    sdk.window.startAutoResizer();\n\n    // Load the initial value from the field (if exists) and ensure it's an array\n    const initialValue = sdk.field.getValue();\n\n    if (Array.isArray(initialValue)) {\n      setImageUrls(initialValue);  // If the value is an array, set it\n    } else {\n      setImageUrls([]);  // Otherwise, initialize as an empty array\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    // Pass current images to the dialog and allow selecting multiple\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,  // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n      },\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && Array.isArray(selectedImages)) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = (index) => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n  };\n\n  return (\n    <Container>\n      <ImageRow>\n        {imageUrls.map((imageUrl, index) => (\n          <ImageContainer key={index}>\n            <StyledImage src={imageUrl} alt=\"Selected from Pixabay\" />\n            <Button onClick={() => removeImage(index)} size=\"small\" style={{ marginTop: '5px' }}>\n              Remove\n            </Button>\n          </ImageContainer>\n        ))}\n      </ImageRow>\n\n      {imageUrls.length < MAX_IMAGES && (\n        <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n          {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n        </Button>\n      )}\n\n      {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n    </Container>\n  );\n};\n\nexport default Field;\n\n\n\n\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// // Constants\n// const MAX_IMAGES = 5;  // Limit to 5 images\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   max-height: 400px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: grid;\n//   grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n//   gap: 10px;\n// `;\n\n// const ImageContainer = styled.div`\n//   text-align: center;\n// `;\n\n// const StyledImage = styled.img`\n//   width: 100px;\n//   height: 100px;\n//   object-fit: cover;\n//   border-radius: 5px;\n// `;\n\n// // Component\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n//   useEffect(() => {\n//     // Load the initial value from the field (if exists) and ensure it's an array\n//     const initialValue = sdk.field.getValue();\n\n//     if (Array.isArray(initialValue)) {\n//       setImageUrls(initialValue);  // If the value is an array, set it\n//     } else {\n//       setImageUrls([]);  // Otherwise, initialize as an empty array\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select multiple images from Pixabay\n//   const openPixabayDialog = async () => {\n//     // Pass current images to the dialog and allow selecting multiple\n//     const selectedImages = await sdk.dialogs.openCurrentApp({\n//       title: 'Select Images from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//       parameters: {\n//         currentImages: imageUrls,  // Pass the current images as parameters\n//         maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n//       },\n//     });\n\n//     // After the dialog closes, merge the new images with the existing ones\n//     if (selectedImages && Array.isArray(selectedImages)) {\n//       const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n//       setImageUrls(updatedImageUrls);\n//       sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n//     }\n//   };\n\n//   // Remove an individual image\n//   const removeImage = (index) => {\n//     const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n//     setImageUrls(updatedImageUrls);\n//     sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n//   };\n\n//   return (\n//     <Container>\n//       <ImageGrid>\n//         {imageUrls.map((imageUrl, index) => (\n//           <ImageContainer key={index}>\n//             <StyledImage src={imageUrl} alt=\"Selected from Pixabay\" />\n//             <Button onClick={() => removeImage(index)} size=\"small\" style={{ marginTop: '5px' }}>\n//               Remove\n//             </Button>\n//           </ImageContainer>\n//         ))}\n//       </ImageGrid>\n\n//       {imageUrls.length < MAX_IMAGES && (\n//         <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n//           {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n//         </Button>\n//       )}\n\n//       {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n//     </Container>\n//   );\n// };\n\n// export default Field;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,gCAAgC;AACvD,SAASC,MAAM,QAAQ,4BAA4B;AACnD,OAAOC,MAAM,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAE;;AAEvB;AACA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAG;AAC5B;AACA;AACA,CAAC;AAACC,EAAA,GAHIF,SAAS;AAKf,MAAMG,QAAQ,GAAGP,MAAM,CAACK,GAAG;AAC3B;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAJID,QAAQ;AAMd,MAAME,cAAc,GAAGT,MAAM,CAACK,GAAG;AACjC;AACA,CAAC;AAACK,GAAA,GAFID,cAAc;AAIpB,MAAME,WAAW,GAAGX,MAAM,CAACY,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,WAAW;AAOjB,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,GAAG,GAAGlB,MAAM,CAAC,CAAC,CAAC,CAAE;EACvB,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEjDC,SAAS,CAAC,MAAM;IACd;IACAmB,GAAG,CAACG,MAAM,CAACC,gBAAgB,CAAC,CAAC;;IAE7B;IACA,MAAMC,YAAY,GAAGL,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,CAAC;IAEzC,IAAIC,KAAK,CAACC,OAAO,CAACJ,YAAY,CAAC,EAAE;MAC/BH,YAAY,CAACG,YAAY,CAAC,CAAC,CAAE;IAC/B,CAAC,MAAM;MACLH,YAAY,CAAC,EAAE,CAAC,CAAC,CAAE;IACrB;EACF,CAAC,EAAE,CAACF,GAAG,CAAC,CAAC;;EAET;EACA,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC;IACA,MAAMC,cAAc,GAAG,MAAMX,GAAG,CAACY,OAAO,CAACC,cAAc,CAAC;MACtDC,KAAK,EAAE,4BAA4B;MACnCC,KAAK,EAAE,WAAW;MAClBC,SAAS,EAAE,MAAM;MACjBC,UAAU,EAAE;QACVC,aAAa,EAAEjB,SAAS;QAAG;QAC3BkB,SAAS,EAAEhC,UAAU,GAAGc,SAAS,CAACmB,MAAM,CAAG;MAC7C;IACF,CAAC,CAAC;;IAEF;IACA,IAAIT,cAAc,IAAIH,KAAK,CAACC,OAAO,CAACE,cAAc,CAAC,EAAE;MACnD,MAAMU,gBAAgB,GAAG,CAAC,GAAGpB,SAAS,EAAE,GAAGU,cAAc,CAAC,CAACW,KAAK,CAAC,CAAC,EAAEnC,UAAU,CAAC;MAC/Ee,YAAY,CAACmB,gBAAgB,CAAC;MAC9BrB,GAAG,CAACM,KAAK,CAACiB,QAAQ,CAACF,gBAAgB,CAAC,CAAC,CAAE;IACzC;EACF,CAAC;;EAED;EACA,MAAMG,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMJ,gBAAgB,GAAGpB,SAAS,CAACyB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK,CAAC;IAChEvB,YAAY,CAACmB,gBAAgB,CAAC;IAC9BrB,GAAG,CAACM,KAAK,CAACiB,QAAQ,CAACF,gBAAgB,CAAC,CAAC,CAAE;EACzC,CAAC;EAED,OACEnC,OAAA,CAACE,SAAS;IAAAyC,QAAA,GACR3C,OAAA,CAACK,QAAQ;MAAAsC,QAAA,EACN5B,SAAS,CAAC6B,GAAG,CAAC,CAACC,QAAQ,EAAEN,KAAK,KAC7BvC,OAAA,CAACO,cAAc;QAAAoC,QAAA,GACb3C,OAAA,CAACS,WAAW;UAACqC,GAAG,EAAED,QAAS;UAACE,GAAG,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC1DnD,OAAA,CAACH,MAAM;UAACuD,OAAO,EAAEA,CAAA,KAAMd,WAAW,CAACC,KAAK,CAAE;UAACc,IAAI,EAAC,OAAO;UAACC,KAAK,EAAE;YAAEC,SAAS,EAAE;UAAM,CAAE;UAAAZ,QAAA,EAAC;QAErF;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAJUZ,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,EAEVpC,SAAS,CAACmB,MAAM,GAAGjC,UAAU,IAC5BD,OAAA,CAACH,MAAM;MAACuD,OAAO,EAAE5B,iBAAkB;MAAC8B,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAZ,QAAA,EAC9D5B,SAAS,CAACmB,MAAM,GAAG,CAAC,GAAG,iBAAiB,GAAG;IAAe;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CACT,EAEApC,SAAS,CAACmB,MAAM,IAAIjC,UAAU,IAAID,OAAA;MAAA2C,QAAA,GAAG,4BAA0B,EAAC1C,UAAU,EAAC,UAAQ;IAAA;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/E,CAAC;AAEhB,CAAC;AAACtC,EAAA,CApEID,KAAK;EAAA,QACGhB,MAAM;AAAA;AAAA4D,GAAA,GADd5C,KAAK;AAsEX,eAAeA,KAAK;;AAMpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,IAAAR,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAA6C,GAAA;AAAAC,YAAA,CAAArD,EAAA;AAAAqD,YAAA,CAAAnD,GAAA;AAAAmD,YAAA,CAAAjD,GAAA;AAAAiD,YAAA,CAAA9C,GAAA;AAAA8C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}