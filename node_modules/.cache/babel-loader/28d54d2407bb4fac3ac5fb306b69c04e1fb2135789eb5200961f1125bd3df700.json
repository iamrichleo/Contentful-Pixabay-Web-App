{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx\",\n  _s = $RefreshSig$();\n/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n_c = Container;\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 20px;\n`;\n_c2 = ImageGrid;\nconst Image = styled.img`\n  cursor: pointer;\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border: ${props => props.isSelected ? '3px solid blue' : 'none'};\n  opacity: ${props => props.isDisabled ? 0.5 : 1};\n  pointer-events: ${props => props.isDisabled ? 'none' : 'auto'};\n`;\n_c3 = Image;\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n_c4 = Message;\nconst PaginationControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n`;\n_c5 = PaginationControls;\nconst PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\nconst Dialog = () => {\n  _s();\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [page, setPage] = useState(1); // Track current page\n  const [totalHits, setTotalHits] = useState(0); // Total number of images for the query\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    currentImages,\n    maxImages\n  } = sdk.parameters.invocation; // Use currentImages to prevent re-selection\n  const imagesPerPage = 20; // Number of images to fetch per page\n\n  const searchImages = async (newPage = 1) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      setImages(data.hits);\n      setTotalHits(data.totalHits); // Update total hits for the query\n      setPage(newPage); // Update the current page number\n    } catch (error) {\n      console.error('Error fetching images:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleImageClick = imageUrl => {\n    const isSelected = selectedImages.includes(imageUrl);\n    if (isSelected) {\n      // Deselect the image\n      setSelectedImages(selectedImages.filter(img => img !== imageUrl));\n    } else if (selectedImages.length < maxImages) {\n      // Select the image if limit not reached\n      setSelectedImages([...selectedImages, imageUrl]);\n    }\n  };\n  const handleSubmit = () => {\n    sdk.close(selectedImages); // Return the selected images\n  };\n  const nextPage = () => {\n    if (page * imagesPerPage < totalHits) {\n      searchImages(page + 1); // Fetch the next page of images\n    }\n  };\n  const prevPage = () => {\n    if (page > 1) {\n      searchImages(page - 1); // Fetch the previous page of images\n    }\n  };\n  return _jsxDEV(Container, {\n    children: [_jsxDEV(TextInput, {\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search for images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      onClick: () => searchImages(1),\n      isDisabled: isLoading,\n      children: isLoading ? 'Searching...' : 'Search Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), _jsxDEV(ImageGrid, {\n      children: images.map(image => {\n        const isAlreadySelected = currentImages.includes(image.largeImageURL); // Check if image is already selected\n        const isSelected = selectedImages.includes(image.largeImageURL);\n        return _jsxDEV(Image, {\n          src: image.previewURL,\n          alt: image.tags,\n          isSelected: isSelected,\n          isDisabled: isAlreadySelected // Disable re-selection if image is already selected\n          ,\n          onClick: () => handleImageClick(image.largeImageURL)\n        }, image.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), images.length > 0 && _jsxDEV(PaginationControls, {\n      children: [_jsxDEV(Button, {\n        onClick: prevPage,\n        isDisabled: page === 1 || isLoading,\n        children: \"Previous Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), _jsxDEV(Button, {\n        onClick: nextPage,\n        isDisabled: page * imagesPerPage >= totalHits || isLoading,\n        children: \"Next Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), _jsxDEV(Button, {\n      onClick: handleSubmit,\n      isDisabled: selectedImages.length === 0,\n      children: [\"Submit \", selectedImages.length, \" Image\", selectedImages.length !== 1 && 's']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), selectedImages.length >= maxImages && _jsxDEV(Message, {\n      children: [\"You can only select up to \", maxImages, \" images.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Dialog, \"1O3v7GznDSpnktCg26ifPWFtAZ8=\", false, function () {\n  return [useSDK];\n});\n_c6 = Dialog;\nexport default Dialog;\n\n// SINGLE IMAGE SUPPORT\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n// `;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0); // Total number of images that match the query\n//   const imagesPerPage = 20;  // Number of images to fetch per page (default 20 for Pixabay)\n\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state before making a new request\n//     setHasSearched(true);  // Set to true after the first search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Store the total number of hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (err) {\n//       setError('Something went wrong. Please try again.'); // Handle error\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleImageClick = (imageUrl) => {\n//     sdk.close(imageUrl);\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => (\n//           <Image\n//             key={image.id}\n//             src={image.previewURL}\n//             alt={image.tags}\n//             onClick={() => handleImageClick(image.largeImageURL)}\n//           />\n//         ))}\n//       </ImageGrid>\n\n//       {/* Pagination Controls */}\n//       {hasSearched && totalHits > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ImageGrid\");\n$RefreshReg$(_c3, \"Image\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"PaginationControls\");\n$RefreshReg$(_c6, \"Dialog\");","map":{"version":3,"names":["React","useState","useSDK","Button","TextInput","styled","jsxDEV","_jsxDEV","Container","div","_c","ImageGrid","_c2","Image","img","props","isSelected","isDisabled","_c3","Message","p","_c4","PaginationControls","_c5","PIXABAY_API_KEY","Dialog","_s","sdk","query","setQuery","images","setImages","selectedImages","setSelectedImages","page","setPage","totalHits","setTotalHits","isLoading","setIsLoading","currentImages","maxImages","parameters","invocation","imagesPerPage","searchImages","newPage","response","fetch","encodeURIComponent","ok","Error","data","json","hits","error","console","handleImageClick","imageUrl","includes","filter","length","handleSubmit","close","nextPage","prevPage","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","image","isAlreadySelected","largeImageURL","src","previewURL","alt","tags","id","_c6","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n\nconst ImageGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n  border: ${(props) => (props.isSelected ? '3px solid blue' : 'none')};\n  opacity: ${(props) => (props.isDisabled ? 0.5 : 1)};\n  pointer-events: ${(props) => (props.isDisabled ? 'none' : 'auto')};\n`;\n\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n\nconst PaginationControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n`;\n\nconst PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\nconst Dialog = () => {\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [page, setPage] = useState(1);  // Track current page\n  const [totalHits, setTotalHits] = useState(0);  // Total number of images for the query\n  const [isLoading, setIsLoading] = useState(false);\n  const { currentImages, maxImages } = sdk.parameters.invocation;  // Use currentImages to prevent re-selection\n  const imagesPerPage = 20;  // Number of images to fetch per page\n\n  const searchImages = async (newPage = 1) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\n        `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      setImages(data.hits);\n      setTotalHits(data.totalHits);  // Update total hits for the query\n      setPage(newPage);  // Update the current page number\n    } catch (error) {\n      console.error('Error fetching images:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleImageClick = (imageUrl) => {\n    const isSelected = selectedImages.includes(imageUrl);\n\n    if (isSelected) {\n      // Deselect the image\n      setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n    } else if (selectedImages.length < maxImages) {\n      // Select the image if limit not reached\n      setSelectedImages([...selectedImages, imageUrl]);\n    }\n  };\n\n  const handleSubmit = () => {\n    sdk.close(selectedImages);  // Return the selected images\n  };\n\n  const nextPage = () => {\n    if (page * imagesPerPage < totalHits) {\n      searchImages(page + 1);  // Fetch the next page of images\n    }\n  };\n\n  const prevPage = () => {\n    if (page > 1) {\n      searchImages(page - 1);  // Fetch the previous page of images\n    }\n  };\n\n  return (\n    <Container>\n      <TextInput\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search for images\"\n      />\n      <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n        {isLoading ? 'Searching...' : 'Search Images'}\n      </Button>\n\n      <ImageGrid>\n        {images.map((image) => {\n          const isAlreadySelected = currentImages.includes(image.largeImageURL);  // Check if image is already selected\n          const isSelected = selectedImages.includes(image.largeImageURL);\n\n          return (\n            <Image\n              key={image.id}\n              src={image.previewURL}\n              alt={image.tags}\n              isSelected={isSelected}\n              isDisabled={isAlreadySelected}  // Disable re-selection if image is already selected\n              onClick={() => handleImageClick(image.largeImageURL)}\n            />\n          );\n        })}\n      </ImageGrid>\n\n      {images.length > 0 && (\n        <PaginationControls>\n          <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n            Previous Page\n          </Button>\n          <Button\n            onClick={nextPage}\n            isDisabled={page * imagesPerPage >= totalHits || isLoading}\n          >\n            Next Page\n          </Button>\n        </PaginationControls>\n      )}\n\n      <Button onClick={handleSubmit} isDisabled={selectedImages.length === 0}>\n        Submit {selectedImages.length} Image{selectedImages.length !== 1 && 's'}\n      </Button>\n\n      {selectedImages.length >= maxImages && (\n        <Message>You can only select up to {maxImages} images.</Message>\n      )}\n    </Container>\n  );\n};\n\nexport default Dialog;\n\n\n\n\n\n\n// SINGLE IMAGE SUPPORT\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n// `;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0); // Total number of images that match the query\n//   const imagesPerPage = 20;  // Number of images to fetch per page (default 20 for Pixabay)\n\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state before making a new request\n//     setHasSearched(true);  // Set to true after the first search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Store the total number of hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (err) {\n//       setError('Something went wrong. Please try again.'); // Handle error\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleImageClick = (imageUrl) => {\n//     sdk.close(imageUrl);\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => (\n//           <Image\n//             key={image.id}\n//             src={image.previewURL}\n//             alt={image.tags}\n//             onClick={() => handleImageClick(image.largeImageURL)}\n//           />\n//         ))}\n//       </ImageGrid>\n\n//       {/* Pagination Controls */}\n//       {hasSearched && totalHits > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}