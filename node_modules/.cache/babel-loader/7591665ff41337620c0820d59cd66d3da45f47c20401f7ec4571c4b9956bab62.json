{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx\",\n  _s = $RefreshSig$();\n/** @jsxImportSource @emotion/react */\nimport React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport ImageGrid from '../components/shared/ImageGrid';\nimport Thumbnail from '../components/shared/Thumbnail';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nconst MAX_IMAGES = 5; // Limit to 5 images\n\n// Styled Components using Emotion\nconst Container = styled.div`\n  max-height: 400px;\n  overflow-y: auto;\n`;\n_c = Container;\nconst Field = () => {\n  _s();\n  const sdk = useSDK();\n  const [imageUrls, setImageUrls] = useState([]); // Initialize as an empty array\n\n  useEffect(() => {\n    // Start the auto-resizer to automatically adjust the iFrame size\n    sdk.window.startAutoResizer();\n\n    // Load the initial value from the field (if exists) and ensure it's an array\n    const initialValue = sdk.field.getValue();\n    if (Array.isArray(initialValue)) {\n      setImageUrls(initialValue); // If the value is an array, set it\n    } else {\n      setImageUrls([]); // Otherwise, initialize as an empty array\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,\n        // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length // Limit the selection to the remaining slots\n      }\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && Array.isArray(selectedImages)) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls); // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = index => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls); // Update the field with the remaining images\n  };\n  return _jsxDEV(Container, {\n    children: [imageUrls.length > 0 && _jsxDEV(_Fragment, {\n      children: [_jsxDEV(\"h4\", {\n        children: \"Selected Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), _jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        },\n        children: imageUrls.map((imageUrl, index) => _jsxDEV(Thumbnail, {\n          src: imageUrl,\n          onClick: () => removeImage(index) // Allow removal of selected images\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), _jsxDEV(ImageGrid, {\n      images: imageUrls.map((url, index) => ({\n        id: index,\n        previewURL: url,\n        largeImageURL: url\n      })),\n      onImageClick: removeImage,\n      currentImages: imageUrls,\n      selectedImages: [] // Empty for now since this is a field, not a search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), imageUrls.length < MAX_IMAGES && _jsxDEV(Button, {\n      onClick: openPixabayDialog,\n      style: {\n        marginTop: '15px'\n      },\n      children: imageUrls.length > 0 ? 'Add More Images' : 'Select Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), imageUrls.length >= MAX_IMAGES && _jsxDEV(\"p\", {\n      children: [\"You can only select up to \", MAX_IMAGES, \" images.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Field, \"T2fS1IA4kEfV1iw74Vigf9oy38M=\", false, function () {\n  return [useSDK];\n});\n_c2 = Field;\nexport default Field;\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const MAX_IMAGES = 5;  // Limit to 5 images\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   max-height: 400px;\n//   overflow-y: auto;\n// `;\n\n// const ImageRow = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-bottom: 10px;\n// `;\n\n// const ImageContainer = styled.div`\n//   text-align: center;\n// `;\n\n// const StyledImage = styled.img`\n//   width: 100px;\n//   height: 100px;\n//   object-fit: cover;\n//   border-radius: 5px;\n// `;\n\n// // React Component\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n//   useEffect(() => {\n//     // Start the auto-resizer to automatically adjust the iFrame size\n//     sdk.window.startAutoResizer();\n\n//     // Load the initial value from the field (if exists) and ensure it's an array\n//     const initialValue = sdk.field.getValue();\n\n//     if (Array.isArray(initialValue)) {\n//       setImageUrls(initialValue);  // If the value is an array, set it\n//     } else {\n//       setImageUrls([]);  // Otherwise, initialize as an empty array\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select multiple images from Pixabay\n//   const openPixabayDialog = async () => {\n//     // Pass current images to the dialog and allow selecting multiple\n//     const selectedImages = await sdk.dialogs.openCurrentApp({\n//       title: 'Select Images from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//       parameters: {\n//         currentImages: imageUrls,  // Pass the current images as parameters\n//         maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n//       },\n//     });\n\n//     // After the dialog closes, merge the new images with the existing ones\n//     if (selectedImages && Array.isArray(selectedImages)) {\n//       const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n//       setImageUrls(updatedImageUrls);\n//       sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n//     }\n//   };\n\n//   // Remove an individual image\n//   const removeImage = (index) => {\n//     const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n//     setImageUrls(updatedImageUrls);\n//     sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n//   };\n\n//   return (\n//     <Container>\n//       <ImageRow>\n//         {imageUrls.map((imageUrl, index) => (\n//           <ImageContainer key={index}>\n//             <StyledImage src={imageUrl} alt=\"Selected from Pixabay\" />\n//             <Button onClick={() => removeImage(index)} size=\"small\" style={{ marginTop: '5px' }}>\n//               Remove\n//             </Button>\n//           </ImageContainer>\n//         ))}\n//       </ImageRow>\n\n//       {imageUrls.length < MAX_IMAGES && (\n//         <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n//           {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n//         </Button>\n//       )}\n\n//       {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n//     </Container>\n//   );\n// };\n\n// export default Field;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Field\");","map":{"version":3,"names":["React","useState","useEffect","useSDK","Button","styled","ImageGrid","Thumbnail","jsxDEV","_jsxDEV","Fragment","_Fragment","MAX_IMAGES","Container","div","_c","Field","_s","sdk","imageUrls","setImageUrls","window","startAutoResizer","initialValue","field","getValue","Array","isArray","openPixabayDialog","selectedImages","dialogs","openCurrentApp","title","width","minHeight","parameters","currentImages","maxImages","length","updatedImageUrls","slice","setValue","removeImage","index","filter","_","i","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gap","map","imageUrl","src","onClick","images","url","id","previewURL","largeImageURL","onImageClick","marginTop","_c2","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Field.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState, useEffect } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport ImageGrid from '../components/shared/ImageGrid';\nimport Thumbnail from '../components/shared/Thumbnail';\n\nconst MAX_IMAGES = 5;  // Limit to 5 images\n\n// Styled Components using Emotion\nconst Container = styled.div`\n  max-height: 400px;\n  overflow-y: auto;\n`;\n\nconst Field = () => {\n  const sdk = useSDK();\n  const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n  useEffect(() => {\n    // Start the auto-resizer to automatically adjust the iFrame size\n    sdk.window.startAutoResizer();\n\n    // Load the initial value from the field (if exists) and ensure it's an array\n    const initialValue = sdk.field.getValue();\n\n    if (Array.isArray(initialValue)) {\n      setImageUrls(initialValue);  // If the value is an array, set it\n    } else {\n      setImageUrls([]);  // Otherwise, initialize as an empty array\n    }\n  }, [sdk]);\n\n  // Open dialog to select multiple images from Pixabay\n  const openPixabayDialog = async () => {\n    const selectedImages = await sdk.dialogs.openCurrentApp({\n      title: 'Select Images from Pixabay',\n      width: 'fullWidth',\n      minHeight: '80vh',\n      parameters: {\n        currentImages: imageUrls,  // Pass the current images as parameters\n        maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n      },\n    });\n\n    // After the dialog closes, merge the new images with the existing ones\n    if (selectedImages && Array.isArray(selectedImages)) {\n      const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n      setImageUrls(updatedImageUrls);\n      sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n    }\n  };\n\n  // Remove an individual image\n  const removeImage = (index) => {\n    const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n    setImageUrls(updatedImageUrls);\n    sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n  };\n\n  return (\n    <Container>\n      {/* Use Thumbnail for small images and ImageGrid for larger ones */}\n      {imageUrls.length > 0 && (\n        <>\n          <h4>Selected Images</h4>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            {imageUrls.map((imageUrl, index) => (\n              <Thumbnail\n                key={index}\n                src={imageUrl}\n                onClick={() => removeImage(index)}  // Allow removal of selected images\n              />\n            ))}\n          </div>\n        </>\n      )}\n\n      {/* Use ImageGrid for displaying images */}\n      <ImageGrid\n        images={imageUrls.map((url, index) => ({ id: index, previewURL: url, largeImageURL: url }))}\n        onImageClick={removeImage}\n        currentImages={imageUrls}\n        selectedImages={[]}  // Empty for now since this is a field, not a search\n      />\n\n      {imageUrls.length < MAX_IMAGES && (\n        <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n          {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n        </Button>\n      )}\n\n      {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n    </Container>\n  );\n};\n\nexport default Field;\n\n\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState, useEffect } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// const MAX_IMAGES = 5;  // Limit to 5 images\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   max-height: 400px;\n//   overflow-y: auto;\n// `;\n\n// const ImageRow = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-bottom: 10px;\n// `;\n\n// const ImageContainer = styled.div`\n//   text-align: center;\n// `;\n\n// const StyledImage = styled.img`\n//   width: 100px;\n//   height: 100px;\n//   object-fit: cover;\n//   border-radius: 5px;\n// `;\n\n// // React Component\n// const Field = () => {\n//   const sdk = useSDK();  // Access the Contentful SDK\n//   const [imageUrls, setImageUrls] = useState([]);  // Initialize as an empty array\n\n//   useEffect(() => {\n//     // Start the auto-resizer to automatically adjust the iFrame size\n//     sdk.window.startAutoResizer();\n\n//     // Load the initial value from the field (if exists) and ensure it's an array\n//     const initialValue = sdk.field.getValue();\n\n//     if (Array.isArray(initialValue)) {\n//       setImageUrls(initialValue);  // If the value is an array, set it\n//     } else {\n//       setImageUrls([]);  // Otherwise, initialize as an empty array\n//     }\n//   }, [sdk]);\n\n//   // Open dialog to select multiple images from Pixabay\n//   const openPixabayDialog = async () => {\n//     // Pass current images to the dialog and allow selecting multiple\n//     const selectedImages = await sdk.dialogs.openCurrentApp({\n//       title: 'Select Images from Pixabay',\n//       width: 'fullWidth',\n//       minHeight: '80vh',\n//       parameters: {\n//         currentImages: imageUrls,  // Pass the current images as parameters\n//         maxImages: MAX_IMAGES - imageUrls.length,  // Limit the selection to the remaining slots\n//       },\n//     });\n\n//     // After the dialog closes, merge the new images with the existing ones\n//     if (selectedImages && Array.isArray(selectedImages)) {\n//       const updatedImageUrls = [...imageUrls, ...selectedImages].slice(0, MAX_IMAGES);\n//       setImageUrls(updatedImageUrls);\n//       sdk.field.setValue(updatedImageUrls);  // Store the updated image URLs in the field\n//     }\n//   };\n\n//   // Remove an individual image\n//   const removeImage = (index) => {\n//     const updatedImageUrls = imageUrls.filter((_, i) => i !== index);\n//     setImageUrls(updatedImageUrls);\n//     sdk.field.setValue(updatedImageUrls);  // Update the field with the remaining images\n//   };\n\n//   return (\n//     <Container>\n//       <ImageRow>\n//         {imageUrls.map((imageUrl, index) => (\n//           <ImageContainer key={index}>\n//             <StyledImage src={imageUrl} alt=\"Selected from Pixabay\" />\n//             <Button onClick={() => removeImage(index)} size=\"small\" style={{ marginTop: '5px' }}>\n//               Remove\n//             </Button>\n//           </ImageContainer>\n//         ))}\n//       </ImageRow>\n\n//       {imageUrls.length < MAX_IMAGES && (\n//         <Button onClick={openPixabayDialog} style={{ marginTop: '15px' }}>\n//           {imageUrls.length > 0 ? 'Add More Images' : 'Select Images'}\n//         </Button>\n//       )}\n\n//       {imageUrls.length >= MAX_IMAGES && <p>You can only select up to {MAX_IMAGES} images.</p>}\n//     </Container>\n//   );\n// };\n\n// export default Field;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,gCAAgC;AACvD,SAASC,MAAM,QAAQ,4BAA4B;AACnD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,SAAS,MAAM,gCAAgC;AACtD,OAAOC,SAAS,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvD,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAE;;AAEvB;AACA,MAAMC,SAAS,GAAGR,MAAM,CAACS,GAAG;AAC5B;AACA;AACA,CAAC;AAACC,EAAA,GAHIF,SAAS;AAKf,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,GAAG,GAAGf,MAAM,CAAC,CAAC;EACpB,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEjDC,SAAS,CAAC,MAAM;IACd;IACAgB,GAAG,CAACG,MAAM,CAACC,gBAAgB,CAAC,CAAC;;IAE7B;IACA,MAAMC,YAAY,GAAGL,GAAG,CAACM,KAAK,CAACC,QAAQ,CAAC,CAAC;IAEzC,IAAIC,KAAK,CAACC,OAAO,CAACJ,YAAY,CAAC,EAAE;MAC/BH,YAAY,CAACG,YAAY,CAAC,CAAC,CAAE;IAC/B,CAAC,MAAM;MACLH,YAAY,CAAC,EAAE,CAAC,CAAC,CAAE;IACrB;EACF,CAAC,EAAE,CAACF,GAAG,CAAC,CAAC;;EAET;EACA,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,cAAc,GAAG,MAAMX,GAAG,CAACY,OAAO,CAACC,cAAc,CAAC;MACtDC,KAAK,EAAE,4BAA4B;MACnCC,KAAK,EAAE,WAAW;MAClBC,SAAS,EAAE,MAAM;MACjBC,UAAU,EAAE;QACVC,aAAa,EAAEjB,SAAS;QAAG;QAC3BkB,SAAS,EAAEzB,UAAU,GAAGO,SAAS,CAACmB,MAAM,CAAG;MAC7C;IACF,CAAC,CAAC;;IAEF;IACA,IAAIT,cAAc,IAAIH,KAAK,CAACC,OAAO,CAACE,cAAc,CAAC,EAAE;MACnD,MAAMU,gBAAgB,GAAG,CAAC,GAAGpB,SAAS,EAAE,GAAGU,cAAc,CAAC,CAACW,KAAK,CAAC,CAAC,EAAE5B,UAAU,CAAC;MAC/EQ,YAAY,CAACmB,gBAAgB,CAAC;MAC9BrB,GAAG,CAACM,KAAK,CAACiB,QAAQ,CAACF,gBAAgB,CAAC,CAAC,CAAE;IACzC;EACF,CAAC;;EAED;EACA,MAAMG,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMJ,gBAAgB,GAAGpB,SAAS,CAACyB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK,CAAC;IAChEvB,YAAY,CAACmB,gBAAgB,CAAC;IAC9BrB,GAAG,CAACM,KAAK,CAACiB,QAAQ,CAACF,gBAAgB,CAAC,CAAC,CAAE;EACzC,CAAC;EAED,OACE9B,OAAA,CAACI,SAAS;IAAAkC,QAAA,GAEP5B,SAAS,CAACmB,MAAM,GAAG,CAAC,IACnB7B,OAAA,CAAAE,SAAA;MAAAoC,QAAA,GACEtC,OAAA;QAAAsC,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACxB1C,OAAA;QAAK2C,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAO,CAAE;QAAAP,QAAA,EAC1C5B,SAAS,CAACoC,GAAG,CAAC,CAACC,QAAQ,EAAEb,KAAK,KAC7BlC,OAAA,CAACF,SAAS;UAERkD,GAAG,EAAED,QAAS;UACdE,OAAO,EAAEA,CAAA,KAAMhB,WAAW,CAACC,KAAK,CAAE,CAAE;QAAA,GAF/BA,KAAK;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGX,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,eACN,CACH,EAGD1C,OAAA,CAACH,SAAS;MACRqD,MAAM,EAAExC,SAAS,CAACoC,GAAG,CAAC,CAACK,GAAG,EAAEjB,KAAK,MAAM;QAAEkB,EAAE,EAAElB,KAAK;QAAEmB,UAAU,EAAEF,GAAG;QAAEG,aAAa,EAAEH;MAAI,CAAC,CAAC,CAAE;MAC5FI,YAAY,EAAEtB,WAAY;MAC1BN,aAAa,EAAEjB,SAAU;MACzBU,cAAc,EAAE,EAAG,CAAE;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,EAEDhC,SAAS,CAACmB,MAAM,GAAG1B,UAAU,IAC5BH,OAAA,CAACL,MAAM;MAACsD,OAAO,EAAE9B,iBAAkB;MAACwB,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAO,CAAE;MAAAlB,QAAA,EAC9D5B,SAAS,CAACmB,MAAM,GAAG,CAAC,GAAG,iBAAiB,GAAG;IAAe;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CACT,EAEAhC,SAAS,CAACmB,MAAM,IAAI1B,UAAU,IAAIH,OAAA;MAAAsC,QAAA,GAAG,4BAA0B,EAACnC,UAAU,EAAC,UAAQ;IAAA;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/E,CAAC;AAEhB,CAAC;AAAClC,EAAA,CAhFID,KAAK;EAAA,QACGb,MAAM;AAAA;AAAA+D,GAAA,GADdlD,KAAK;AAkFX,eAAeA,KAAK;;AAIpB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,IAAAD,EAAA,EAAAmD,GAAA;AAAAC,YAAA,CAAApD,EAAA;AAAAoD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}