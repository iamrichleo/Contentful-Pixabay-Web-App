{"ast":null,"code":"var _jsxFileName = \"/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx\",\n  _s = $RefreshSig$();\n/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport ImageGrid from '../shared/ImageGrid';\nimport SelectedImagesGrid from '../shared/SelectedImagesGrid';\nimport PaginationControls from '../shared/PaginationControls';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n_c = Container;\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n_c2 = Message;\nconst ErrorMessage = styled.p`\n  margin-top: 20px;\n  color: red;\n  font-weight: bold;\n`;\n_c3 = ErrorMessage;\nconst Dialog = () => {\n  _s();\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalHits, setTotalHits] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    currentImages,\n    maxImages\n  } = sdk.parameters.invocation;\n  const imagesPerPage = 20;\n  const searchImages = async (newPage = 1) => {\n    setIsLoading(true);\n    setError(null);\n    setHasSearched(true);\n    try {\n      const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      setImages(data.hits);\n      setTotalHits(data.totalHits);\n      setPage(newPage);\n    } catch (error) {\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleImageClick = imageUrl => {\n    if (selectedImages.includes(imageUrl)) {\n      setSelectedImages(selectedImages.filter(img => img !== imageUrl));\n    } else if (selectedImages.length < maxImages) {\n      setSelectedImages([...selectedImages, imageUrl]);\n    }\n  };\n  const removeSelectedImage = imageUrl => {\n    setSelectedImages(selectedImages.filter(img => img !== imageUrl));\n  };\n  const handleSubmit = () => {\n    sdk.close(selectedImages);\n  };\n  const nextPage = () => {\n    if (page * imagesPerPage < totalHits) {\n      searchImages(page + 1);\n    }\n  };\n  const prevPage = () => {\n    if (page > 1) {\n      searchImages(page - 1);\n    }\n  };\n  return _jsxDEV(Container, {\n    children: [_jsxDEV(TextInput, {\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search for images\",\n      css: {\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      onClick: () => searchImages(1),\n      isDisabled: isLoading,\n      children: isLoading ? 'Searching...' : 'Search Images'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), error && _jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this), !error && images.length === 0 && hasSearched && !isLoading && _jsxDEV(Message, {\n      children: \"No images found for this query. Try a different search term.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), selectedImages.length > 0 && _jsxDEV(_Fragment, {\n      children: [_jsxDEV(\"h4\", {\n        children: \"Selected Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), _jsxDEV(SelectedImagesGrid, {\n        selectedImages: selectedImages,\n        onRemoveImage: removeSelectedImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), _jsxDEV(ImageGrid, {\n      images: images,\n      onImageClick: handleImageClick,\n      currentImages: currentImages,\n      selectedImages: selectedImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), _jsxDEV(PaginationControls, {\n      onNextPage: nextPage,\n      onPrevPage: prevPage,\n      isNextDisabled: page * imagesPerPage >= totalHits,\n      isPrevDisabled: page === 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      onClick: handleSubmit,\n      isDisabled: selectedImages.length === 0,\n      children: [\"Submit \", selectedImages.length, \" Image\", selectedImages.length !== 1 && 's']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), selectedImages.length >= maxImages && _jsxDEV(Message, {\n      children: [\"You can only select up to \", maxImages, \" images.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Dialog, \"efFHT259C/HCjp8pbWcQ/4OWFms=\", false, function () {\n  return [useSDK];\n});\n_c4 = Dialog;\nexport default Dialog;\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// // Constants\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const SelectedImagesGrid = styled.div`\n//   display: flex;\n//   gap: 10px;\n//   margin-bottom: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n//   border: ${(props) => (props.isSelected ? '3px solid blue' : 'none')};\n//   opacity: ${(props) => (props.isDisabled ? 0.5 : 1)};\n//   pointer-events: ${(props) => (props.isDisabled ? 'none' : 'auto')};\n// `;\n\n// const Thumbnail = styled.img`\n//   width: 75px;\n//   height: 75px;\n//   object-fit: cover;\n//   border-radius: 5px;\n//   border: 2px solid #ddd;\n//   cursor: pointer;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n//   margin-bottom: 10px;\n// `;\n\n// // Component\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [selectedImages, setSelectedImages] = useState([]);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0);  // Total number of images for the query\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);  // Track if the user has searched\n//   const [error, setError] = useState(null);  // Error state\n//   const { currentImages, maxImages } = sdk.parameters.invocation;\n//   const imagesPerPage = 20;  // Number of images to fetch per page\n\n//   // Search for images from Pixabay\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null);  // Reset error state before making a new request\n//     setHasSearched(true);  // Track that the user has performed a search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Update total hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (error) {\n//       setError('Something went wrong. Please try again.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Handle image selection and deselection\n//   const handleImageClick = (imageUrl) => {\n//     const isSelected = selectedImages.includes(imageUrl);\n\n//     if (isSelected) {\n//       setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n//     } else if (selectedImages.length < maxImages) {\n//       setSelectedImages([...selectedImages, imageUrl]);\n//     }\n//   };\n\n//   // Remove image from the selected images preview\n//   const removeSelectedImage = (imageUrl) => {\n//     setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n//   };\n\n//   const handleSubmit = () => {\n//     sdk.close(selectedImages);  // Return the selected images\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//         css={{ marginBottom: '10px' }}\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}  {/* Display error message if any */}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       {/* Display the selected images preview */}\n//       {selectedImages.length > 0 && (\n//         <>\n//           <h4>Selected Images</h4>\n//           <SelectedImagesGrid>\n//             {selectedImages.map((imageUrl) => (\n//               <div key={imageUrl}>\n//                 <Thumbnail\n//                   src={imageUrl}\n//                   alt=\"Selected Image\"\n//                   onClick={() => removeSelectedImage(imageUrl)}  // Allow removal of selected images\n//                 />\n//               </div>\n//             ))}\n//           </SelectedImagesGrid>\n//         </>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => {\n//           const isAlreadySelected = currentImages.includes(image.largeImageURL);  // Check if image is already selected\n//           const isSelected = selectedImages.includes(image.largeImageURL);\n\n//           return (\n//             <Image\n//               key={image.id}\n//               src={image.previewURL}\n//               alt={image.tags}\n//               isSelected={isSelected}\n//               isDisabled={isAlreadySelected}  // Disable re-selection if image is already selected\n//               onClick={() => handleImageClick(image.largeImageURL)}\n//             />\n//           );\n//         })}\n//       </ImageGrid>\n\n//       {images.length > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n\n//       <Button onClick={handleSubmit} isDisabled={selectedImages.length === 0}>\n//         Submit {selectedImages.length} Image{selectedImages.length !== 1 && 's'}\n//       </Button>\n\n//       {selectedImages.length >= maxImages && (\n//         <Message>You can only select up to {maxImages} images.</Message>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"Dialog\");","map":{"version":3,"names":["React","useState","useSDK","Button","TextInput","styled","ImageGrid","SelectedImagesGrid","PaginationControls","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Message","p","_c2","ErrorMessage","_c3","Dialog","_s","sdk","query","setQuery","images","setImages","selectedImages","setSelectedImages","page","setPage","totalHits","setTotalHits","isLoading","setIsLoading","hasSearched","setHasSearched","error","setError","currentImages","maxImages","parameters","invocation","imagesPerPage","searchImages","newPage","response","fetch","PIXABAY_API_KEY","encodeURIComponent","ok","Error","data","json","hits","handleImageClick","imageUrl","includes","filter","img","length","removeSelectedImage","handleSubmit","close","nextPage","prevPage","children","value","onChange","e","target","placeholder","css","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isDisabled","onRemoveImage","onImageClick","onNextPage","onPrevPage","isNextDisabled","isPrevDisabled","_c4","$RefreshReg$"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/locations/Dialog.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { Button, TextInput } from '@contentful/f36-components';\nimport styled from '@emotion/styled';\nimport ImageGrid from '../shared/ImageGrid';\nimport SelectedImagesGrid from '../shared/SelectedImagesGrid';\nimport PaginationControls from '../shared/PaginationControls';\n\nconst Container = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n`;\n\nconst Message = styled.p`\n  margin-top: 20px;\n  color: #666;\n`;\n\nconst ErrorMessage = styled.p`\n  margin-top: 20px;\n  color: red;\n  font-weight: bold;\n`;\n\nconst Dialog = () => {\n  const sdk = useSDK();\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalHits, setTotalHits] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [error, setError] = useState(null);\n  const { currentImages, maxImages } = sdk.parameters.invocation;\n  const imagesPerPage = 20;\n\n  const searchImages = async (newPage = 1) => {\n    setIsLoading(true);\n    setError(null);\n    setHasSearched(true);\n\n    try {\n      const response = await fetch(\n        `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch images');\n      }\n      const data = await response.json();\n      setImages(data.hits);\n      setTotalHits(data.totalHits);\n      setPage(newPage);\n    } catch (error) {\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleImageClick = (imageUrl) => {\n    if (selectedImages.includes(imageUrl)) {\n      setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n    } else if (selectedImages.length < maxImages) {\n      setSelectedImages([...selectedImages, imageUrl]);\n    }\n  };\n\n  const removeSelectedImage = (imageUrl) => {\n    setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n  };\n\n  const handleSubmit = () => {\n    sdk.close(selectedImages);\n  };\n\n  const nextPage = () => {\n    if (page * imagesPerPage < totalHits) {\n      searchImages(page + 1);\n    }\n  };\n\n  const prevPage = () => {\n    if (page > 1) {\n      searchImages(page - 1);\n    }\n  };\n\n  return (\n    <Container>\n      <TextInput\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search for images\"\n        css={{ marginBottom: '10px' }}\n      />\n      <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n        {isLoading ? 'Searching...' : 'Search Images'}\n      </Button>\n\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n      {!error && images.length === 0 && hasSearched && !isLoading && (\n        <Message>No images found for this query. Try a different search term.</Message>\n      )}\n\n      {selectedImages.length > 0 && (\n        <>\n          <h4>Selected Images</h4>\n          <SelectedImagesGrid selectedImages={selectedImages} onRemoveImage={removeSelectedImage} />\n        </>\n      )}\n\n      <ImageGrid images={images} onImageClick={handleImageClick} currentImages={currentImages} selectedImages={selectedImages} />\n\n      <PaginationControls\n        onNextPage={nextPage}\n        onPrevPage={prevPage}\n        isNextDisabled={page * imagesPerPage >= totalHits}\n        isPrevDisabled={page === 1}\n      />\n\n      <Button onClick={handleSubmit} isDisabled={selectedImages.length === 0}>\n        Submit {selectedImages.length} Image{selectedImages.length !== 1 && 's'}\n      </Button>\n\n      {selectedImages.length >= maxImages && <Message>You can only select up to {maxImages} images.</Message>}\n    </Container>\n  );\n};\n\nexport default Dialog;\n\n\n\n// /** @jsxImportSource @emotion/react */\n// import React, { useState } from 'react';\n// import { useSDK } from '@contentful/react-apps-toolkit';\n// import { Button, TextInput } from '@contentful/f36-components';\n// import styled from '@emotion/styled';\n\n// // Constants\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n\n// // Styled Components using Emotion\n// const Container = styled.div`\n//   padding: 20px;\n//   overflow-y: auto;\n// `;\n\n// const ImageGrid = styled.div`\n//   display: flex;\n//   flex-wrap: wrap;\n//   gap: 10px;\n//   margin-top: 20px;\n// `;\n\n// const SelectedImagesGrid = styled.div`\n//   display: flex;\n//   gap: 10px;\n//   margin-bottom: 20px;\n// `;\n\n// const Image = styled.img`\n//   cursor: pointer;\n//   width: 150px;\n//   height: 150px;\n//   object-fit: cover;\n//   border: ${(props) => (props.isSelected ? '3px solid blue' : 'none')};\n//   opacity: ${(props) => (props.isDisabled ? 0.5 : 1)};\n//   pointer-events: ${(props) => (props.isDisabled ? 'none' : 'auto')};\n// `;\n\n// const Thumbnail = styled.img`\n//   width: 75px;\n//   height: 75px;\n//   object-fit: cover;\n//   border-radius: 5px;\n//   border: 2px solid #ddd;\n//   cursor: pointer;\n// `;\n\n// const Message = styled.p`\n//   margin-top: 20px;\n//   color: #666;\n// `;\n\n// const ErrorMessage = styled.p`\n//   margin-top: 20px;\n//   color: red;\n//   font-weight: bold;\n// `;\n\n// const PaginationControls = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n//   margin-top: 20px;\n//   margin-bottom: 10px;\n// `;\n\n// // Component\n// const Dialog = () => {\n//   const sdk = useSDK();\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [selectedImages, setSelectedImages] = useState([]);\n//   const [page, setPage] = useState(1);  // Track current page\n//   const [totalHits, setTotalHits] = useState(0);  // Total number of images for the query\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hasSearched, setHasSearched] = useState(false);  // Track if the user has searched\n//   const [error, setError] = useState(null);  // Error state\n//   const { currentImages, maxImages } = sdk.parameters.invocation;\n//   const imagesPerPage = 20;  // Number of images to fetch per page\n\n//   // Search for images from Pixabay\n//   const searchImages = async (newPage = 1) => {\n//     setIsLoading(true);\n//     setError(null);  // Reset error state before making a new request\n//     setHasSearched(true);  // Track that the user has performed a search\n\n//     try {\n//       const response = await fetch(\n//         `https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}&page=${newPage}&per_page=${imagesPerPage}`\n//       );\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch images');\n//       }\n//       const data = await response.json();\n//       if (data.hits.length === 0) {\n//         setImages([]);  // No images found for the query\n//       } else {\n//         setImages(data.hits);  // Set images for the current page\n//         setTotalHits(data.totalHits);  // Update total hits for the query\n//         setPage(newPage);  // Update the current page number\n//       }\n//     } catch (error) {\n//       setError('Something went wrong. Please try again.');\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Handle image selection and deselection\n//   const handleImageClick = (imageUrl) => {\n//     const isSelected = selectedImages.includes(imageUrl);\n\n//     if (isSelected) {\n//       setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n//     } else if (selectedImages.length < maxImages) {\n//       setSelectedImages([...selectedImages, imageUrl]);\n//     }\n//   };\n\n//   // Remove image from the selected images preview\n//   const removeSelectedImage = (imageUrl) => {\n//     setSelectedImages(selectedImages.filter((img) => img !== imageUrl));\n//   };\n\n//   const handleSubmit = () => {\n//     sdk.close(selectedImages);  // Return the selected images\n//   };\n\n//   const nextPage = () => {\n//     if (page * imagesPerPage < totalHits) {\n//       searchImages(page + 1);  // Fetch the next page of images\n//     }\n//   };\n\n//   const prevPage = () => {\n//     if (page > 1) {\n//       searchImages(page - 1);  // Fetch the previous page of images\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <TextInput\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for images\"\n//         css={{ marginBottom: '10px' }}\n//       />\n//       <Button onClick={() => searchImages(1)} isDisabled={isLoading}>\n//         {isLoading ? 'Searching...' : 'Search Images'}\n//       </Button>\n\n//       {error && <ErrorMessage>{error}</ErrorMessage>}  {/* Display error message if any */}\n\n//       {!error && images.length === 0 && hasSearched && !isLoading && (\n//         <Message>No images found for this query. Try a different search term.</Message>\n//       )}\n\n//       {/* Display the selected images preview */}\n//       {selectedImages.length > 0 && (\n//         <>\n//           <h4>Selected Images</h4>\n//           <SelectedImagesGrid>\n//             {selectedImages.map((imageUrl) => (\n//               <div key={imageUrl}>\n//                 <Thumbnail\n//                   src={imageUrl}\n//                   alt=\"Selected Image\"\n//                   onClick={() => removeSelectedImage(imageUrl)}  // Allow removal of selected images\n//                 />\n//               </div>\n//             ))}\n//           </SelectedImagesGrid>\n//         </>\n//       )}\n\n//       <ImageGrid>\n//         {images.map((image) => {\n//           const isAlreadySelected = currentImages.includes(image.largeImageURL);  // Check if image is already selected\n//           const isSelected = selectedImages.includes(image.largeImageURL);\n\n//           return (\n//             <Image\n//               key={image.id}\n//               src={image.previewURL}\n//               alt={image.tags}\n//               isSelected={isSelected}\n//               isDisabled={isAlreadySelected}  // Disable re-selection if image is already selected\n//               onClick={() => handleImageClick(image.largeImageURL)}\n//             />\n//           );\n//         })}\n//       </ImageGrid>\n\n//       {images.length > 0 && (\n//         <PaginationControls>\n//           <Button onClick={prevPage} isDisabled={page === 1 || isLoading}>\n//             Previous Page\n//           </Button>\n//           <Button\n//             onClick={nextPage}\n//             isDisabled={page * imagesPerPage >= totalHits || isLoading}\n//           >\n//             Next Page\n//           </Button>\n//         </PaginationControls>\n//       )}\n\n//       <Button onClick={handleSubmit} isDisabled={selectedImages.length === 0}>\n//         Submit {selectedImages.length} Image{selectedImages.length !== 1 && 's'}\n//       </Button>\n\n//       {selectedImages.length >= maxImages && (\n//         <Message>You can only select up to {maxImages} images.</Message>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default Dialog;\n\n\n// const PIXABAY_API_KEY = '45979271-945d910b95e96769c55111ae5';\n// const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(query)}`);\n// const response = await fetch(`https://pixabay.com/api/?key=45979271-945d910b95e96769c55111ae5&q=falskdjasd`);\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}