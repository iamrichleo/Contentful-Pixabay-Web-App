{"ast":null,"code":"export default async function fetchRequest(url, options = {}) {\n  try {\n    const {\n      method = 'GET',\n      headers = {},\n      body,\n      responseType = 'json'\n    } = options;\n    const response = await fetch(url, {\n      method,\n      headers: {\n        ...headers\n      },\n      body: body ? JSON.stringify(body) : undefined\n    });\n\n    // Check if the response is OK (status code 200-299)\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`);\n    }\n\n    // Parse the response based on the expected response type\n    let data;\n    if (responseType === 'json') {\n      data = await response.json();\n    } else if (responseType === 'text') {\n      data = await response.text();\n    } else {\n      throw new Error('Unsupported response type');\n    }\n    return data;\n  } catch (error) {\n    // Log the error and rethrow it so it can be handled by the calling code\n    console.error('Fetch request failed:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["fetchRequest","url","options","method","headers","body","responseType","response","fetch","JSON","stringify","undefined","ok","Error","status","statusText","data","json","text","error","console"],"sources":["/Users/rleo/Documents/my-pixabay-app/src/services/api/fetchRequest.js"],"sourcesContent":["export default async function fetchRequest(url, options = {}) {\n    try {\n      const { method = 'GET', headers = {}, body, responseType = 'json' } = options;\n  \n      const response = await fetch(url, {\n        method,\n        headers: {\n          ...headers,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n      });\n  \n      // Check if the response is OK (status code 200-299)\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`);\n      }\n  \n      // Parse the response based on the expected response type\n      let data;\n      if (responseType === 'json') {\n        data = await response.json();\n      } else if (responseType === 'text') {\n        data = await response.text();\n      } else {\n        throw new Error('Unsupported response type');\n      }\n  \n      return data;\n    } catch (error) {\n      // Log the error and rethrow it so it can be handled by the calling code\n      console.error('Fetch request failed:', error);\n      throw error;\n    }\n  }\n  "],"mappings":"AAAA,eAAe,eAAeA,YAAYA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1D,IAAI;IACF,MAAM;MAAEC,MAAM,GAAG,KAAK;MAAEC,OAAO,GAAG,CAAC,CAAC;MAAEC,IAAI;MAAEC,YAAY,GAAG;IAAO,CAAC,GAAGJ,OAAO;IAE7E,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;MAChCE,MAAM;MACNC,OAAO,EAAE;QACP,GAAGA;MACL,CAAC;MACDC,IAAI,EAAEA,IAAI,GAAGI,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,GAAGM;IACtC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,QAAQ,CAACO,MAAM,MAAMP,QAAQ,CAACQ,UAAU,EAAE,CAAC;IACpF;;IAEA;IACA,IAAIC,IAAI;IACR,IAAIV,YAAY,KAAK,MAAM,EAAE;MAC3BU,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAIX,YAAY,KAAK,MAAM,EAAE;MAClCU,IAAI,GAAG,MAAMT,QAAQ,CAACW,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,MAAM,IAAIL,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,OAAOG,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}